
Prelab 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000001b8  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800104  00800104  00000250  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000771  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000689  00000000  00000000  00000a59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000317  00000000  00000000  000010e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000013fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bb  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ab  00000000  00000000  0000180b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000018b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 eb       	ldi	r30, 0xB8	; 184
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int cont = 0;
int main(void)
{
	// salidas
	DDRD = 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
  aa:	1b b8       	out	0x0b, r1	; 11
	// PINES RX TX
	UCSR0B = 0;
  ac:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// entradas
	DDRB &= ~(1<<0);
  b0:	84 b1       	in	r24, 0x04	; 4
  b2:	8e 7f       	andi	r24, 0xFE	; 254
  b4:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PB0);
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	85 b9       	out	0x05, r24	; 5
	DDRB &= ~(1<<1);
  bc:	84 b1       	in	r24, 0x04	; 4
  be:	8d 7f       	andi	r24, 0xFD	; 253
  c0:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PB1);
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	85 b9       	out	0x05, r24	; 5
	// INTERRUPCION PARA PUERTO B
	PCICR |= (1<<PCIE0);
  c8:	e8 e6       	ldi	r30, 0x68	; 104
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	80 83       	st	Z, r24
	// HABILITAR PARA PCINT0
	PCMSK0 |= ((1<<PCINT0)|(1<<PCINT1));
  d2:	eb e6       	ldi	r30, 0x6B	; 107
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	83 60       	ori	r24, 0x03	; 3
  da:	80 83       	st	Z, r24
	sei();
  dc:	78 94       	sei
	while (1)
	{
		if (cont > 255){
  de:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
  e2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
  e6:	8f 3f       	cpi	r24, 0xFF	; 255
  e8:	91 05       	cpc	r25, r1
  ea:	29 f0       	breq	.+10     	; 0xf6 <main+0x50>
  ec:	24 f0       	brlt	.+8      	; 0xf6 <main+0x50>
			cont = 0;
  ee:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
  f2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
		}
		if (cont < 0){
  f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
  fa:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
  fe:	99 23       	and	r25, r25
 100:	34 f4       	brge	.+12     	; 0x10e <main+0x68>
			cont = 255;
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 10a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		}
		PORTD = cont;
 10e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 112:	8b b9       	out	0x0b, r24	; 11
	}
 114:	e4 cf       	rjmp	.-56     	; 0xde <main+0x38>

00000116 <__vector_3>:
}

ISR(PCINT0_vect){
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	80 e7       	ldi	r24, 0x70	; 112
 12c:	92 e0       	ldi	r25, 0x02	; 2
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <__vector_3+0x18>
 136:	00 c0       	rjmp	.+0      	; 0x138 <__vector_3+0x22>
 138:	00 00       	nop
	_delay_ms(50);
	Boton11 = PINB&(1<<PINB0);
 13a:	93 b1       	in	r25, 0x03	; 3
 13c:	91 70       	andi	r25, 0x01	; 1
 13e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <Boton11>
	Boton2 = PINB&(1<<PINB1);
 142:	83 b1       	in	r24, 0x03	; 3
 144:	82 70       	andi	r24, 0x02	; 2
 146:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if ((Boton11 == 0)&&(Boton1X == 1)){
 14a:	91 11       	cpse	r25, r1
 14c:	10 c0       	rjmp	.+32     	; 0x16e <__vector_3+0x58>
 14e:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <Boton1X>
 152:	21 30       	cpi	r18, 0x01	; 1
 154:	61 f4       	brne	.+24     	; 0x16e <__vector_3+0x58>
		Boton1X = 0;
 156:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Boton1X>
		cont ++;
 15a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 15e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 162:	2f 5f       	subi	r18, 0xFF	; 255
 164:	3f 4f       	sbci	r19, 0xFF	; 255
 166:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <__data_end+0x1>
 16a:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
	}
	if (Boton11 == 1){
 16e:	91 30       	cpi	r25, 0x01	; 1
 170:	11 f4       	brne	.+4      	; 0x176 <__vector_3+0x60>
		Boton1X = 1;
 172:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <Boton1X>
	}
	if ((Boton2 == 0)&&(Boton2X == 2)){
 176:	81 11       	cpse	r24, r1
 178:	10 c0       	rjmp	.+32     	; 0x19a <__vector_3+0x84>
 17a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Boton2X>
 17e:	92 30       	cpi	r25, 0x02	; 2
 180:	61 f4       	brne	.+24     	; 0x19a <__vector_3+0x84>
		Boton2X = 0;
 182:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <Boton2X>
		cont --;
 186:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 18a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	31 09       	sbc	r19, r1
 192:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <__data_end+0x1>
 196:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
	}
	if (Boton2 == 2){
 19a:	82 30       	cpi	r24, 0x02	; 2
 19c:	11 f4       	brne	.+4      	; 0x1a2 <__vector_3+0x8c>
		Boton2X = 2;
 19e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Boton2X>
	}
}
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
